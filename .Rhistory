ggsurvplot(km_fit, data = df, pval = TRUE,
risk.table = TRUE,
risk.table.height = 0.25,
risk.table.y.text.col = TRUE,
title = "Kaplan-Meier Curves by Job Satisfaction Levels",
xlab = "Time to Promotion (Years)", ylab = "Survival Probability",
ggtheme = theme_minimal(),
font.main = c(16, "bold"),
font.x = c(14, "bold"),
font.y = c(14, "bold"),
font.tickslab = c(12, "plain"),
legend.labs = c("Very Low", "Low", "Medium", "High"),  # Customize legend labels
legend.title = "Job Satisfaction",  # Customize legend title
palette = c("#E7B800", "#2E9FDF", "#FC4E07", "#00BA38"), # Provide four colors
xlim = c(0,11)
width = 10, height = 6)
# Fit the Kaplan-Meier model
km_fit <- survfit(Surv(YearsAtCompany, PromotionEvent) ~ JobSatisfaction, data = df)
# Plot the Kaplan-Meier survival curves
ggsurvplot(km_fit, data = df, pval = TRUE,
risk.table = TRUE,
risk.table.height = 0.25,
risk.table.y.text.col = TRUE,
title = "Kaplan-Meier Curves by Job Satisfaction Levels",
xlab = "Time to Promotion (Years)", ylab = "Survival Probability",
ggtheme = theme_minimal(),
font.main = c(16, "bold"),
font.x = c(14, "bold"),
font.y = c(14, "bold"),
font.tickslab = c(12, "plain"),
legend.labs = c("Very Low", "Low", "Medium", "High"),  # Customize legend labels
legend.title = "Job Satisfaction",  # Customize legend title
palette = c("#E7B800", "#2E9FDF", "#FC4E07", "#00BA38"), # Provide four colors
xlim = c(0,11),
width = 10, height = 6)
# Fit the Kaplan-Meier model
km_fit <- survfit(Surv(YearsAtCompany, PromotionEvent) ~ JobSatisInvolvement, data = df)
# Fit the Kaplan-Meier model
km_fit <- survfit(Surv(YearsAtCompany, PromotionEvent) ~ JobInvolvement, data = df)
# Plot the Kaplan-Meier survival curves
ggsurvplot(km_fit, data = df, pval = TRUE,
risk.table = TRUE,
risk.table.height = 0.25,
risk.table.y.text.col = TRUE,
title = "Kaplan-Meier Curves by Job Satisfaction Levels",
xlab = "Time to Promotion (Years)", ylab = "Survival Probability",
ggtheme = theme_minimal(),
font.main = c(16, "bold"),
font.x = c(14, "bold"),
font.y = c(14, "bold"),
font.tickslab = c(12, "plain"),
legend.labs = c("Very Low", "Low", "Medium", "High"),  # Customize legend labels
legend.title = "Job Satisfaction",  # Customize legend title
palette = c("#E7B800", "#2E9FDF", "#FC4E07", "#00BA38"), # Provide four colors
xlim = c(0,11),
width = 10, height = 6)
# Filter the data to include only "High" (4) and "Very Low" (1) job satisfaction levels
filtered_df <- subset(df, JobSatisfaction %in% c(1, 4))
# Fit the Kaplan-Meier model with filtered data
km_fit <- survfit(Surv(YearsAtCompany, PromotionEvent) ~ JobSatisfaction, data = filtered_df)
# Plot the Kaplan-Meier survival curves
ggsurvplot(km_fit, data = filtered_df, pval = TRUE,
risk.table = TRUE,
risk.table.height = 0.25,
risk.table.y.text.col = TRUE,
title = "Kaplan-Meier Curves: High vs. Very Low Job Satisfaction",
xlab = "Time to Promotion (Years)", ylab = "Survival Probability",
ggtheme = theme_minimal(),
font.main = c(16, "bold"),
font.x = c(14, "bold"),
font.y = c(14, "bold"),
font.tickslab = c(12, "plain"),
legend.labs = c("Very Low", "High"),  # Customize legend labels
legend.title = "Job Satisfaction",  # Customize legend title
palette = c("#FC4E07", "#2E9FDF"),  # Provide two colors
width = 10, height = 6)
# Filter the data to include only "High" (4) and "Very Low" (1) job satisfaction levels
filtered_df <- subset(df, JobInvolvement %in% c(1, 4))
# Fit the Kaplan-Meier model with filtered data
km_fit <- survfit(Surv(YearsAtCompany, PromotionEvent) ~ JobInvolvement, data = filtered_df)
# Plot the Kaplan-Meier survival curves
ggsurvplot(km_fit, data = filtered_df, pval = TRUE,
risk.table = TRUE,
risk.table.height = 0.25,
risk.table.y.text.col = TRUE,
title = "Kaplan-Meier Curves: High vs. Very Low Job Satisfaction",
xlab = "Time to Promotion (Years)", ylab = "Survival Probability",
ggtheme = theme_minimal(),
font.main = c(16, "bold"),
font.x = c(14, "bold"),
font.y = c(14, "bold"),
font.tickslab = c(12, "plain"),
legend.labs = c("Very Low", "High"),  # Customize legend labels
legend.title = "Job Satisfaction",  # Customize legend title
palette = c("#FC4E07", "#2E9FDF"),  # Provide two colors
width = 10, height = 6)
# Fit the Kaplan-Meier model
km_fit <- survfit(Surv(YearsAtCompany, PromotionEvent) ~ Performance, data = df)
# Plot the Kaplan-Meier survival curves
ggsurvplot(km_fit, data = df, pval = TRUE,
risk.table = TRUE,
risk.table.height = 0.25,
risk.table.y.text.col = TRUE,
title = "Kaplan-Meier Curves by Job Satisfaction Levels",
xlab = "Time to Promotion (Years)", ylab = "Survival Probability",
ggtheme = theme_minimal(),
font.main = c(16, "bold"),
font.x = c(14, "bold"),
font.y = c(14, "bold"),
font.tickslab = c(12, "plain"),
legend.labs = c("Very Low", "Low", "Medium", "High"),  # Customize legend labels
legend.title = "Job Satisfaction",  # Customize legend title
palette = c("#E7B800", "#2E9FDF", "#FC4E07", "#00BA38"), # Provide four colors
xlim = c(0,11),
width = 10, height = 6)
# Fit the Kaplan-Meier model
km_fit <- survfit(Surv(YearsAtCompany, PromotionEvent) ~ Performance, data = df)
# Plot the Kaplan-Meier survival curves
ggsurvplot(km_fit, data = df, pval = TRUE,
risk.table = TRUE,
risk.table.height = 0.25,
risk.table.y.text.col = TRUE,
title = "Kaplan-Meier Curves by Job Satisfaction Levels",
xlab = "Time to Promotion (Years)", ylab = "Survival Probability",
ggtheme = theme_minimal(),
font.main = c(16, "bold"),
font.x = c(14, "bold"),
font.y = c(14, "bold"),
font.tickslab = c(12, "plain"),
legend.labs = c("Very Low", "Low", "Medium", "High"),  # Customize legend labels
legend.title = "Job Satisfaction",  # Customize legend title
palette = c("#E7B800", "#2E9FDF", "#FC4E07", "#00BA38"), # Provide four colors
# xlim = c(0,11),
width = 10, height = 6)
# Filter the data to include only "High" (4) and "Very Low" (1) job satisfaction levels
filtered_df <- subset(df, Performance %in% c(1, 4))
# Fit the Kaplan-Meier model with filtered data
km_fit <- survfit(Surv(YearsAtCompany, PromotionEvent) ~ Performance, data = filtered_df)
# Plot the Kaplan-Meier survival curves
ggsurvplot(km_fit, data = filtered_df, pval = TRUE,
risk.table = TRUE,
risk.table.height = 0.25,
risk.table.y.text.col = TRUE,
title = "Kaplan-Meier Curves: High vs. Very Low Job Satisfaction",
xlab = "Time to Promotion (Years)", ylab = "Survival Probability",
ggtheme = theme_minimal(),
font.main = c(16, "bold"),
font.x = c(14, "bold"),
font.y = c(14, "bold"),
font.tickslab = c(12, "plain"),
legend.labs = c("Very Low", "High"),  # Customize legend labels
legend.title = "Job Satisfaction",  # Customize legend title
palette = c("#FC4E07", "#2E9FDF"),  # Provide two colors
width = 10, height = 6)
# Filter the data to include only "High" (4) and "Very Low" (1) job satisfaction levels
filtered_df <- subset(df, JobInvolvement %in% c(1, 4))
# Fit the Kaplan-Meier model with filtered data
km_fit <- survfit(Surv(YearsAtCompany, PromotionEvent) ~ JobInvolvement, data = filtered_df)
# Plot the Kaplan-Meier survival curves
ggsurvplot(km_fit, data = filtered_df, pval = TRUE,
risk.table = TRUE,
risk.table.height = 0.25,
risk.table.y.text.col = TRUE,
title = "Kaplan-Meier Curves: High vs. Very Low Job Satisfaction",
xlab = "Time to Promotion (Years)", ylab = "Survival Probability",
ggtheme = theme_minimal(),
font.main = c(16, "bold"),
font.x = c(14, "bold"),
font.y = c(14, "bold"),
font.tickslab = c(12, "plain"),
legend.labs = c("Very Low", "High"),  # Customize legend labels
legend.title = "Job Satisfaction",  # Customize legend title
palette = c("#FC4E07", "#2E9FDF"),  # Provide two colors
width = 10, height = 6)
# Filter the data to include only "High" (4) and "Very Low" (1) job satisfaction levels
filtered_df <- subset(df, JobInvolvement %in% c(1, 4))
# Fit the Kaplan-Meier model with filtered data
km_fit <- survfit(Surv(YearsAtCompany, PromotionEvent) ~ JobInvolvement, data = filtered_df)
# Plot the Kaplan-Meier survival curves
ggsurvplot(km_fit, data = filtered_df, pval = TRUE,
risk.table = TRUE,
risk.table.height = 0.25,
risk.table.y.text.col = TRUE,
title = "Kaplan-Meier Curves: High vs. Very Low Job Satisfaction",
xlab = "Time to Promotion (Years)", ylab = "Survival Probability",
ggtheme = theme_minimal(),
font.main = c(16, "bold"),
font.x = c(14, "bold"),
font.y = c(14, "bold"),
font.tickslab = c(12, "plain"),
legend.labs = c("Very Low", "High"),  # Customize legend labels
legend.title = "Job Satisfaction",  # Customize legend title
palette = c("#FC4E07", "#2E9FDF"),  # Provide two colors
xlim = c(5,10)
width = 10, height = 6)
# Filter the data to include only "High" (4) and "Very Low" (1) job satisfaction levels
filtered_df <- subset(df, JobInvolvement %in% c(1, 4))
# Fit the Kaplan-Meier model with filtered data
km_fit <- survfit(Surv(YearsAtCompany, PromotionEvent) ~ JobInvolvement, data = filtered_df)
# Plot the Kaplan-Meier survival curves
ggsurvplot(km_fit, data = filtered_df, pval = TRUE,
risk.table = TRUE,
risk.table.height = 0.25,
risk.table.y.text.col = TRUE,
title = "Kaplan-Meier Curves: High vs. Very Low Job Satisfaction",
xlab = "Time to Promotion (Years)", ylab = "Survival Probability",
ggtheme = theme_minimal(),
font.main = c(16, "bold"),
font.x = c(14, "bold"),
font.y = c(14, "bold"),
font.tickslab = c(12, "plain"),
legend.labs = c("Very Low", "High"),  # Customize legend labels
legend.title = "Job Satisfaction",  # Customize legend title
palette = c("#FC4E07", "#2E9FDF"),  # Provide two colors
xlim = c(5,10),
width = 10, height = 6)
# Filter the data to include only "High" (4) and "Very Low" (1) job satisfaction levels
filtered_df <- subset(df, JobInvolvement %in% c(1, 4))
# Fit the Kaplan-Meier model with filtered data
km_fit <- survfit(Surv(YearsAtCompany, PromotionEvent) ~ JobInvolvement, data = filtered_df)
# Plot the Kaplan-Meier survival curves
ggsurvplot(km_fit, data = filtered_df, pval = TRUE,
risk.table = TRUE,
risk.table.height = 0.25,
risk.table.y.text.col = TRUE,
title = "Kaplan-Meier Curves: High vs. Very Low Job Satisfaction",
xlab = "Time to Promotion (Years)", ylab = "Survival Probability",
ggtheme = theme_minimal(),
font.main = c(16, "bold"),
font.x = c(14, "bold"),
font.y = c(14, "bold"),
font.tickslab = c(12, "plain"),
legend.labs = c("Very Low", "High"),  # Customize legend labels
legend.title = "Job Satisfaction",  # Customize legend title
palette = c("#FC4E07", "#2E9FDF"),  # Provide two colors
xlim = c(0,10),
width = 10, height = 6)
pacman::p_load(lubridate, ggthemes, reactable,
reactablefmtr, gt, gtExtras, tidyverse)
library(RODBC)
con <- odbcConnectAccess2007('data/Coffee Chain.mdb')
library(RODBC)
con <- odbcConnectAccess2007('data/Coffee Chain.mdb'
write_rds(coffeechain, "data/CoffeeChain.rds")
pacman::p_load(lubridate, ggthemes, reactable,
reactablefmtr, gt, gtExtras, tidyverse)
# library(RODBC)
# con <- odbcConnectAccess2007('data/Coffee Chain.mdb')
# coffeechain <- sqlFetch(con, 'CoffeeChain Query')
# write_rds(coffeechain, "data/CoffeeChain.rds")
# odbcClose(con)
coffeechain <- read_rds("data/rds/CoffeeChain.rds")
product <- coffeechain %>%
group_by(`Product`) %>%
summarise(`target` = sum(`Budget Sales`),
`current` = sum(`Sales`)) %>%
ungroup()
ggplot(product, aes(Product, current)) + geom_col(aes(Product, max(target) * 1.01), fill="grey85", width=0.85) + geom_col(aes(Product, target * 0.75), fill="grey60", width=0.85) + geom_col(aes(Product, target * 0.5), fill="grey50", width=0.85) + geom_col(aes(Product, current), width=0.35, fill = "black") + geom_errorbar(aes(y = target, x = Product, ymin = target, ymax= target), width = .4, colour = "red", size = 1) + coord_flip()
sales_report <- coffeechain %>%
filter(Date >= "2013-01-01") %>%
mutate(Month = month(Date)) %>%
group_by(Month, Product) %>%
summarise(Sales = sum(Sales)) %>%
ungroup() %>%
select(Month, Product, Sales)
mins <- group_by(sales_report, Product) %>%
slice(which.min(Sales))
maxs <- group_by(sales_report, Product) %>%
slice(which.max(Sales))
ends <- group_by(sales_report, Product) %>%
filter(Month == max(Month))
quarts <- sales_report %>%
group_by(Product) %>%
summarise(quart1 = quantile(Sales,
0.25),
quart2 = quantile(Sales,
0.75)) %>%
right_join(sales_report)
ggplot(sales_report, aes(x=Month, y=Sales)) +
facet_grid(Product ~ ., scales = "free_y") +
geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2),
fill = 'grey90') +
geom_line(size=0.3) +
geom_point(data = mins, col = 'red') +
geom_point(data = maxs, col = 'blue') +
geom_text(data = mins, aes(label = Sales), vjust = -1) +
geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +
geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +
geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +
expand_limits(x = max(sales_report$Month) +
(0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +
scale_x_continuous(breaks = seq(1, 12, 1)) +
scale_y_continuous(expand = c(0.1, 0)) +
theme_tufte(base_size = 3, base_family = "Helvetica") +
theme(axis.title=element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(), strip.text = element_blank())
product %>%
gt::gt() %>%
gt_plt_bullet(column = current,
target = target,
width = 60,
palette = c("lightblue",
"black")) %>%
gt_theme_538()
install.packages("svglite")
pacman::p_load(lubridate, ggthemes, reactable,
reactablefmtr, gt, gtExtras, tidyverse)
# library(RODBC)
# con <- odbcConnectAccess2007('data/Coffee Chain.mdb')
# coffeechain <- sqlFetch(con, 'CoffeeChain Query')
# write_rds(coffeechain, "data/CoffeeChain.rds")
# odbcClose(con)
coffeechain <- read_rds("data/rds/CoffeeChain.rds")
product <- coffeechain %>%
group_by(`Product`) %>%
summarise(`target` = sum(`Budget Sales`),
`current` = sum(`Sales`)) %>%
ungroup()
ggplot(product, aes(Product, current)) + geom_col(aes(Product, max(target) * 1.01), fill="grey85", width=0.85) + geom_col(aes(Product, target * 0.75), fill="grey60", width=0.85) + geom_col(aes(Product, target * 0.5), fill="grey50", width=0.85) + geom_col(aes(Product, current), width=0.35, fill = "black") + geom_errorbar(aes(y = target, x = Product, ymin = target, ymax= target), width = .4, colour = "red", size = 1) + coord_flip()
sales_report <- coffeechain %>%
filter(Date >= "2013-01-01") %>%
mutate(Month = month(Date)) %>%
group_by(Month, Product) %>%
summarise(Sales = sum(Sales)) %>%
ungroup() %>%
select(Month, Product, Sales)
mins <- group_by(sales_report, Product) %>%
slice(which.min(Sales))
maxs <- group_by(sales_report, Product) %>%
slice(which.max(Sales))
ends <- group_by(sales_report, Product) %>%
filter(Month == max(Month))
quarts <- sales_report %>%
group_by(Product) %>%
summarise(quart1 = quantile(Sales,
0.25),
quart2 = quantile(Sales,
0.75)) %>%
right_join(sales_report)
ggplot(sales_report, aes(x=Month, y=Sales)) +
facet_grid(Product ~ ., scales = "free_y") +
geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2),
fill = 'grey90') +
geom_line(size=0.3) +
geom_point(data = mins, col = 'red') +
geom_point(data = maxs, col = 'blue') +
geom_text(data = mins, aes(label = Sales), vjust = -1) +
geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +
geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +
geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +
expand_limits(x = max(sales_report$Month) +
(0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +
scale_x_continuous(breaks = seq(1, 12, 1)) +
scale_y_continuous(expand = c(0.1, 0)) +
theme_tufte(base_size = 3, base_family = "Helvetica") +
theme(axis.title=element_blank(), axis.text.y = element_blank(),
axis.ticks = element_blank(), strip.text = element_blank())
product %>%
gt::gt() %>%
gt_plt_bullet(column = current,
target = target,
width = 60,
palette = c("lightblue",
"black")) %>%
gt_theme_538()
report <- coffeechain %>%
mutate(Year = year(Date)) %>%
filter(Year == "2013") %>%
mutate (Month = month(Date,
label = TRUE,
abbr = TRUE)) %>%
group_by(Product, Month) %>%
summarise(Sales = sum(Sales)) %>%
ungroup()
report %>%
group_by(Product) %>%
summarize('Monthly Sales' = list(Sales),
.groups = "drop")
report %>%
group_by(Product) %>%
summarize('Monthly Sales' = list(Sales),
.groups = "drop") %>%
gt() %>%
gt_plt_sparkline('Monthly Sales',
same_limit = FALSE)
report %>%
group_by(Product) %>%
summarise("Min" = min(Sales, na.rm = T),
"Max" = max(Sales, na.rm = T),
"Average" = mean(Sales, na.rm = T)
) %>%
gt() %>%
fmt_number(columns = 4,
decimals = 2)
spark <- report %>%
group_by(Product) %>%
summarize('Monthly Sales' = list(Sales),
.groups = "drop")
sales <- report %>%
group_by(Product) %>%
summarise("Min" = min(Sales, na.rm = T),
"Max" = max(Sales, na.rm = T),
"Average" = mean(Sales, na.rm = T)
)
sales_data = left_join(sales, spark)
sales_data %>%
gt() %>%
gt_plt_sparkline('Monthly Sales',
same_limit = FALSE)
bullet <- coffeechain %>%
filter(Date >= "2013-01-01") %>%
group_by(`Product`) %>%
summarise(`Target` = sum(`Budget Sales`),
`Actual` = sum(`Sales`)) %>%
ungroup()
sales_data = sales_data %>%
left_join(bullet)
sales_data %>%
gt() %>%
gt_plt_sparkline('Monthly Sales') %>%
gt_plt_bullet(column = Actual,
target = Target,
width = 28,
palette = c("lightblue",
"black")) %>%
gt_theme_538()
remotes::install_github("timelyportfolio/dataui")
library(dataui)
report <- report %>%
group_by(Product) %>%
summarize(`Monthly Sales` = list(Sales))
reactable(
report,
columns = list(
Product = colDef(maxWidth = 200),
`Monthly Sales` = colDef(
cell = react_sparkline(report)
)
)
)
reactable(
report,
defaultPageSize = 13,
columns = list(
Product = colDef(maxWidth = 200),
`Monthly Sales` = colDef(
cell = react_sparkline(report)
)
)
)
reactable(
report,
defaultPageSize = 13,
columns = list(
Product = colDef(maxWidth = 200),
`Monthly Sales` = colDef(
cell = react_sparkline(
report,
highlight_points = highlight_points(
min = "red", max = "blue"),
labels = c("first", "last")
)
)
)
)
reactable(
report,
defaultPageSize = 13,
columns = list(
Product = colDef(maxWidth = 200),
`Monthly Sales` = colDef(
cell = react_sparkline(
report,
highlight_points = highlight_points(
min = "red", max = "blue"),
statline = "mean"
)
)
)
)
reactable(
report,
defaultPageSize = 13,
columns = list(
Product = colDef(maxWidth = 200),
`Monthly Sales` = colDef(
cell = react_sparkline(
report,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
reactable(
report,
defaultPageSize = 13,
columns = list(
Product = colDef(maxWidth = 200),
`Monthly Sales` = colDef(
cell = react_sparkbar(
report,
highlight_bars = highlight_bars(
min = "red", max = "blue"),
bandline = "innerquartiles",
statline = "mean")
)
)
)
